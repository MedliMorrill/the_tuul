import { LyricSegmentIterator, LyricsScreen, compileLyricTimings, setScreenStartTimes, adjustScreenTimestamps, setSegmentEndTimes, createAssFile, floatToTimecode, addTitleScreen, denormalizeTimestamps } from "./timing";
import { LYRIC_MARKERS } from "../constants";
import { LyricSegment } from "./timing";
import fs from 'fs';


const testLyrics = "Be bop_a lu bop\nShe's my ba/by\n\nAnd_here's_screen_two"
const testEvents = [
    [1.0, LYRIC_MARKERS.SEGMENT_START],
    [2.0, LYRIC_MARKERS.SEGMENT_END],
    [3.0, LYRIC_MARKERS.SEGMENT_START],
    [4.0, LYRIC_MARKERS.SEGMENT_START],
    [5.0, LYRIC_MARKERS.SEGMENT_START],
    [6.0, LYRIC_MARKERS.SEGMENT_START],
    [7.0, LYRIC_MARKERS.SEGMENT_START],
    [8.0, LYRIC_MARKERS.SEGMENT_START],
    [9.0, LYRIC_MARKERS.SEGMENT_START]
]

const shortIntroTestEvents = testEvents;
const longIntroTestEvents = [
    [6.0, LYRIC_MARKERS.SEGMENT_START],
    [7.0, LYRIC_MARKERS.SEGMENT_END],
    [8.0, LYRIC_MARKERS.SEGMENT_START],
    [9.0, LYRIC_MARKERS.SEGMENT_START],
    [10.0, LYRIC_MARKERS.SEGMENT_START],
    [11.0, LYRIC_MARKERS.SEGMENT_START],
    [12.0, LYRIC_MARKERS.SEGMENT_START],
    [13.0, LYRIC_MARKERS.SEGMENT_START],
    [14.0, LYRIC_MARKERS.SEGMENT_START]
]

const testAss = `[Script Info]
; Script generated by The Tüül - https://the-tuul.com

[V4+ Styles]
Format: Name, Alignment, Fontname, Fontsize, PrimaryColour, SecondaryColour, Bold, ScaleX, ScaleY, Spacing, MarginL, MarginR, Encoding
Style: Default,8,Arial Narrow,20,&H00FF00FF,&H00FFFF00,-1,100,100,0,0,0,0

[Events]
Format: Layer, Style, Start, End, MarginV, Text
Dialogue: 0,Default,0:00:00.00,0:00:04.00,130,{\\k0}{\\kf200}It's Cøøl to Tüül
Dialogue: 0,Default,0:00:00.00,0:00:04.00,160,{\\k200}{\\kf200}TÜ/ÜL
Dialogue: 0,Default,0:00:04.00,0:00:10.00,130,{\\k100}{\\kf100}Be bop {\\kf100}{\\kf100}a lu bop

Dialogue: 0,Default,0:00:04.00,0:00:10.00,160,{\\k400}{\\kf100}She's my ba{\\kf100}by


Dialogue: 0,Default,0:00:10.00,0:01:04.00,145,{\\k0}{\\kf100}And {\\kf100}here's {\\kf100}screen {\\kf5100}two
`

const longIntroTestAss = `[Script Info]
; Script generated by The Tüül - https://the-tuul.com

[V4+ Styles]
Format: Name, Alignment, Fontname, Fontsize, PrimaryColour, SecondaryColour, Bold, ScaleX, ScaleY, Spacing, MarginL, MarginR, Encoding
Style: Default,8,Arial Narrow,20,&H00FF00FF,&H00FFFF00,-1,100,100,0,0,0,0

[Events]
Format: Layer, Style, Start, End, MarginV, Text
Dialogue: 0,Default,0:00:00.00,0:00:04.00,130,{\\k0}{\\kf200}It's Cøøl to Tüül
Dialogue: 0,Default,0:00:00.00,0:00:04.00,160,{\\k200}{\\kf200}TÜ/ÜL
Dialogue: 0,Default,0:00:04.00,0:00:15.00,130,{\\k300}{\\kf300}■■■■{\\kf100}Be bop {\\kf100}{\\kf100}a lu bop

Dialogue: 0,Default,0:00:04.00,0:00:15.00,160,{\\k900}{\\kf100}She's my ba{\\kf100}by


Dialogue: 0,Default,0:00:15.00,0:01:04.00,145,{\\k0}{\\kf100}And {\\kf100}here's {\\kf100}screen {\\kf4600}two
`

test('LyricSegmentIterator', () => {
    let iterator = new LyricSegmentIterator(testLyrics);
    const segmentsWithoutMarkup = Array.from(iterator);
    expect(segmentsWithoutMarkup.length).toBe(8);
    expect(segmentsWithoutMarkup[0].text).toBe("Be bop ");

    iterator = new LyricSegmentIterator(testLyrics, true);
    const segmentsWithMarkup = Array.from(iterator);
    expect(segmentsWithMarkup.length).toBe(8);
    expect(segmentsWithMarkup[0].text).toBe("Be bop_");
});

test('compileLyricTimings', () => {
    const screens = compileLyricTimings(testLyrics, testEvents);
    expect(screens.length).toBe(2);
    expect(screens[0].lines.length).toBe(2);
    expect(screens[0].lines[0].segments.length).toBe(2);
    expect(screens[1].lines[0].segments.length).toBe(4);
});

test('setSegmentEndTimes', () => {
    const initialScreens = compileLyricTimings(testLyrics, testEvents);
    const songDuration = 60;
    const screens = setSegmentEndTimes(initialScreens, songDuration);
    expect(screens[0].lines[0].segments[0].endTimestamp).toBe(2.0);
    expect(screens[0].lines[0].segments[1].endTimestamp).toBe(4.0);
    expect(screens[0].lines[1].segments[0].endTimestamp).toBe(5.0);
    expect(screens[0].lines[1].segments[1].endTimestamp).toBe(6.0);
    expect(screens[1].lines[0].segments[0].endTimestamp).toBe(7.0);

})

test('LyricSegment', () => {
    const segment = new LyricSegment("boop", 2.0, 3.0);
    expect(segment.toAss()).toBe("{\\kf100}boop")

    const underSecondSegment = new LyricSegment("baby", .5, .75);
    expect(underSecondSegment.toAss()).toBe("{\\kf25}baby");
});

test('LyricScreen does ass', () => {
    const screen = new LyricsScreen();
    screen.toAss
});

test('setScreenStartTimes', () => {
    const screens = compileLyricTimings(testLyrics, testEvents);
    const adjusted = setScreenStartTimes(screens);
    expect(adjusted[0].startTimestamp).toBe(0.0);
});

test('adjustTimestamps', () => {
    const screens = setScreenStartTimes(compileLyricTimings(testLyrics, testEvents));

    const adjusted = adjustScreenTimestamps(screens, 1.0);
    expect(adjusted[0].lines[0].timestamp).toBe(2.0);
    expect(adjusted[0].startTimestamp).toBe(1.0)
});

test('addTitleScreenToShortIntroSong', () => {
    const titleScreenAss = `Dialogue: 0,Default,0:00:00.00,0:00:04.00,130,{\\k0}{\\kf200}Tüülin' Around
Dialogue: 0,Default,0:00:00.00,0:00:04.00,160,{\\k200}{\\kf200}The Tüüls
`
    const screens = denormalizeTimestamps(compileLyricTimings(testLyrics, shortIntroTestEvents), 60.0);
    const screensWithTitle = addTitleScreen(screens, "Tüülin' Around", "The Tüüls");
    expect(screensWithTitle.length).toBe(3);
    expect(screensWithTitle[0].toAssEvents({})).toBe(titleScreenAss);
    expect(screensWithTitle[0].audioDelay).toBe(4);
});

test('createAssFileForShortIntroSong', () => {
    const songDuration = 60.0;
    const assFile = createAssFile(testLyrics, shortIntroTestEvents, songDuration, "It's Cøøl to Tüül", "TÜ/ÜL");
    expect(assFile).toBe(testAss);
});

test('addCountIn', () => {
    const songDuration = 60.0;
    const assFile = createAssFile(testLyrics, longIntroTestEvents, songDuration, "It's Cøøl to Tüül", "TÜ/ÜL");
    expect(assFile).toBe(longIntroTestAss);
});

test('createAssForFireAtMidnight', () => {
    const songDuration = 60.0;
    const lyrics = fs.readFileSync('tests/assets/fire_at_midnight_lyrics.txt', { encoding: 'utf-8' });
    const events = JSON.parse(fs.readFileSync('tests/assets/fam_timings.json'));
    const expectedAss = fs.readFileSync('tests/assets/fam_subtitles.ass', { encoding: 'utf-8' });
    const ass = createAssFile(lyrics, events, songDuration, "Fire At Midnight", "Jethro Tull");
    expect(ass).toBe(expectedAss);
});

test('floatToTimecode', () => {
    expect(floatToTimecode(0)).toBe("0:00:00.00");
    expect(floatToTimecode(25.42)).toBe("0:00:25.42");
    expect(floatToTimecode(60)).toBe("0:01:00.00");
});