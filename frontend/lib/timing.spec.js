import { LyricSegmentIterator, LyricsScreen, compileLyricTimings, setSegmentEndTimes, createAssFile, floatToTimecode} from "./timing.ts";
import { LYRIC_MARKERS } from "../constants";
import { LyricSegment } from "./timing";


const testLyrics = "Be bop_a lu bop\nShe's my ba/by"
const testEvents = [
    [1.0, LYRIC_MARKERS.SEGMENT_START],
    [2.0, LYRIC_MARKERS.SEGMENT_END],
    [3.0, LYRIC_MARKERS.SEGMENT_START],
    [4.0, LYRIC_MARKERS.SEGMENT_START],
    [5.0, LYRIC_MARKERS.SEGMENT_START]
]

const testAss = `
[Script Info]
; Script generated by The Tüül - https://the-tuul.com

[V4+ Styles]
Format: Name, Alignment, Fontname, Fontsize, PrimaryColor, SecondaryColor, Bold, ScaleX, ScaleY, Spacing, MarginL, MarginR, Encoding
Style: Default,8,Arial Narrow,20,&HFF00FFFF,&H00FFFFFF,-1,100,100,0,0,0,0

[Events]
Format: Layer, Style, Start, End, MarginV, Text
Dialogue: 0,Default,0:00:00.00,0:01:00.00,130,{\\k100}{\\kf100}Be bop {\\kf100}{\\kf100}a lu bop

Dialogue: 0,Default,0:00:00.00,0:01:00.00,160,{\\k400}{\\kf100}She's my ba{\\kf5500}by
`

test('LyricSegmentIterator', () => {
    let iterator = new LyricSegmentIterator(testLyrics);
    const segmentsWithoutMarkup = Array.from(iterator);
    expect(segmentsWithoutMarkup.length).toBe(4);
    expect(segmentsWithoutMarkup[0].text).toBe("Be bop ");

    iterator = new LyricSegmentIterator(testLyrics, true);
    const segmentsWithMarkup = Array.from(iterator);
    expect(segmentsWithMarkup.length).toBe(4);
    expect(segmentsWithMarkup[0].text).toBe("Be bop_");
});

test('compileLyricTimings', () => {
    const screens = compileLyricTimings(testLyrics, testEvents);
    expect(screens.length).toBe(1);
    expect(screens[0].lines.length).toBe(2);
    expect(screens[0].lines[0].segments.length).toBe(2);
});

test('setSegmentEndTimes', () => {
    const initialScreens = compileLyricTimings(testLyrics, testEvents);
    const songDuration = 60;
    const screens = setSegmentEndTimes(initialScreens, songDuration);
    expect(screens[0].lines[0].segments[0].endTimestamp).toBe(2.0);
    expect(screens[0].lines[0].segments[1].endTimestamp).toBe(4.0);
    expect(screens[0].lines[1].segments[0].endTimestamp).toBe(5.0);
    expect(screens[0].lines[1].segments[1].endTimestamp).toBe(60.0);
})

test('LyricSegment', () => {
    const segment = new LyricSegment("boop", 2.0, 3.0);
    expect(segment.toAss()).toBe("{\\kf100}boop")
});

test('LyricScreen does ass', () => {
    const screen = new LyricsScreen();
    screen.toAss
});

test('createAssFile', () => {
    const songDuration = 60.0;
    const assFile = createAssFile(testLyrics, testEvents, songDuration);
    expect(assFile).toBe(testAss);
});

test('floatToTimecode', () => {
    expect(floatToTimecode(0)).toBe("0:00:00.00");
    expect(floatToTimecode(25.42)).toBe("0:00:25.42");
    expect(floatToTimecode(60)).toBe("0:01:00.00");
});